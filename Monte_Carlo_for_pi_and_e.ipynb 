{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMuHmg4fJfBkvTfeePba7xa",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/haiyuhuang177/Monte-Carlo-Simulation/blob/main/Monte_Carlo_for_pi_and_e.ipynb%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eXN_xl0tyBHB",
        "outputId": "30a1eed0-8364-421b-955c-dc7257591faf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Estimated value of π with 100000000 samples: 3.14157616\n"
          ]
        }
      ],
      "source": [
        "import random\n",
        "\n",
        "def monte_carlo_pi(num_samples):\n",
        "    inside_circle = 0\n",
        "\n",
        "    for _ in range(num_samples):\n",
        "        x = random.uniform(0, 1)\n",
        "        y = random.uniform(0, 1)\n",
        "\n",
        "        if x**2 + y**2 <= 1:\n",
        "            inside_circle += 1\n",
        "\n",
        "    pi_estimate = (inside_circle / num_samples) * 4\n",
        "    return pi_estimate\n",
        "\n",
        "# Example usage\n",
        "num_samples = 10000000\n",
        "pi_estimate = monte_carlo_pi(num_samples)\n",
        "print(f\"Estimated value of π with {num_samples} samples: {pi_estimate}\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def visualize_monte_carlo_pi(num_samples):\n",
        "    inside_x = []\n",
        "    inside_y = []\n",
        "    outside_x = []\n",
        "    outside_y = []\n",
        "\n",
        "    for _ in range(num_samples):\n",
        "        x = random.uniform(0, 1)\n",
        "        y = random.uniform(0, 1)\n",
        "\n",
        "        if x**2 + y**2 <= 1:\n",
        "            inside_x.append(x)\n",
        "            inside_y.append(y)\n",
        "        else:\n",
        "            outside_x.append(x)\n",
        "            outside_y.append(y)\n",
        "\n",
        "    plt.figure(figsize=(6, 6))\n",
        "    plt.scatter(inside_x, inside_y, color='green', marker='.')\n",
        "    plt.scatter(outside_x, outside_y, color='red', marker='.')\n",
        "    plt.title('Monte Carlo Estimation of π')\n",
        "    plt.xlabel('x')\n",
        "    plt.ylabel('y')\n",
        "    plt.show()\n",
        "\n",
        "# Example usage\n",
        "visualize_monte_carlo_pi(100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "HPyVIizgyO8a",
        "outputId": "9f20454a-0775-4f01-b0bf-efe09a031303"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "#I = inf{i: X_1 + ... + X_i > 1}. EI = e. Use P(X_1 + ... + X_n < 1) = 1/n!\n",
        "def estimate_e(num_trials):\n",
        "    total_draws = 0\n",
        "\n",
        "    for _ in range(num_trials):\n",
        "        sum_random_numbers = 0\n",
        "        draws = 0\n",
        "\n",
        "        while sum_random_numbers <= 1:\n",
        "            sum_random_numbers += random.uniform(0, 1)\n",
        "            draws += 1\n",
        "\n",
        "        total_draws += draws\n",
        "\n",
        "    e_estimate = total_draws / num_trials\n",
        "    return e_estimate\n",
        "\n",
        "# Example usage\n",
        "num_trials = 10000000\n",
        "e_estimate = estimate_e(num_trials)\n",
        "print(f\"Estimated value of e with {num_trials} trials: {e_estimate}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WJla60WP1aFz",
        "outputId": "2117e25e-8282-4b5b-b557-93d56585de47"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Estimated value of e with 10000000 trials: 2.7184583\n"
          ]
        }
      ]
    }
  ]
}